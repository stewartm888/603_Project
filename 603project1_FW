%% data.mat work

clc
clear
data = load('data.mat');
face = data.face;
neutralset=face(:,:,1:3:end);
smileset=face(:,:,2:3:end);
dim1 = 24;
dim2 = 21;
sample = 200;

% Data Matrix
zer1 = zeros(200,504);
zer2 = zeros(200,504);
for v = 1:sample
    nu = neutralset(:,:,v);
    zer1(v,:) = nu(:)';
    nu = smileset(:,:,v);
    zer2(v,:) = nu(:)';
    
end

samp1 = sample;
samp2 = sample;
zframe = [zer1;zer2];
vdim1 = 1:samp1;
vdim2 = samp1+1:samp1+samp2;

% PCA
[U,Sig,V] = svd(zframe','econ');
PCAn = 20;
Y = zframe*U(:,1:PCAn);

figure;
hold on;
grid;
plot3(Y(vdim1,1), Y(vdim1,2), Y(vdim1,3),'.', 'Markersize', 34);
plot3(Y(vdim2,1), Y(vdim2,2), Y(vdim2,3),'.', 'Markersize', 34);

% Test/Train split
Ntrain = 150;
Ntest = sample-Ntrain;

train1 = 1:Ntrain; 
train2 = (sample+Ntrain+1):(2*sample); 

test1 = (Ntrain+1):sample; 
test2 = (sample+Ntrain+1):(2*sample); 

train_idx = [train1,train2];
test_idx = [test1,test2];

Ytrain = Y(train_idx,:);
Ytest = Y(test_idx,:); 


%covariance matrix
nutr1=Y(vdim1,:);
nutr2=Y(vdim2,:);

e1=mean(nutr1,1);
e2=mean(nutr2,1);

nutr1x=nutr1-ones(samp1,1)*e1;
nutr2x=nutr2-ones(samp2,1)*e2;
S1=nutr1x'*nutr1x/samp1;
S2=nutr2x'*nutr2x/samp2;
figure;
imagesc(S1);
colorbar('southoutside');


%descriminant functions
desc1=inv(S1);
desc2=inv(S2);
e1=e1';
e2=e2';
func0=0.5*(log(det(S2)/det(S1)))-0.5*(e1'*desc1*e1-e2'*desc2*e2);
g=@(x)-0.5*x'*(desc1-desc2)*x+x'*(desc1*e1-desc2*e2)+func0;

%Bayes Success rate
Y3=zeros(sample,PCAn);
label=zeros(sample,1);
for v=1:sample
    nu=neutralset(:,:,v);
    y=(nu(:)'*U(:,1:PCAn))'; 
    Y3(v,:)=y';
    label(v)=sign(g(y));
end
ipercent=length(find(label>0))/200;
faceBayes_successes = length(find(label>0))
faceBayes_fails = length(find(label<0))
faceBaysianpercent = ipercent



%KNN
zer1 = zeros(sample, dim1*dim2);
zer2 = zeros(sample, dim1*dim2);
for i = 1:sample
    nu = neutralset(:,:,i);
    zer1 (i,:) = nu(:)';
    nu1 = smileset(:,:,i);
    zer2(i,:) = nu1(:)';
end

samp1 = sample;
samp2 = sample;
zframe = [zer1;zer2];
vdim1 = 1:samp1;
vdim2 = samp1+1:samp1+samp2;

%%PCA

[U,Sig,V] = svd(zframe', 'econ');
PCAn = 20;

Y = zframe*U(:,1:PCAn);

figure;
hold on;
grid;
plot3(Y(vdim1,1), Y(vdim1,2), Y(vdim1,3),'.', 'Markersize', 20, 'color', 'k');
plot3(Y(vdim2,1), Y(vdim2,2), Y(vdim2,3),'.', 'Markersize', 20, 'color', 'r');
view(2);


%Make test and train
Ntrain = 150;
Ntest = sample-Ntrain;
train1 = 1:Ntrain;
train2 = (sample+1) : (sample+Ntrain);



test1 = (Ntrain + 1):sample;
test2 = (Ntrain+sample+1):(2*sample);

train_ind = [train1, train2]; 
test_ind = [test1, test2];

Ytrain = Y(train_ind,:);

Ytest = Y(test_ind,:);
a = size(Ytrain, 1);

knn = 20;
labels = zeros(length(test_ind),1);
for i = 1 :length(test_ind)
    ytest = Ytest(i,:);
    dist_sq = sum((Ytrain - ones(size(Ytrain, 1),1)*ytest).^2, 2);
    dist = sqrt(dist_sq);
    [dsort, isort] = sort(dist, 'ascend');
    kNN = isort(1:knn);
    knn_neutral = find(kNN <= Ntrain);
    knn_smile = find(kNN > Ntrain);
    if length(knn_neutral) > length(knn_smile)
        labels(i) = 1;
    else
        labels(i) = -1;
    end


end

for v= 1: (knn)
    a = kNN(v);
    subplot (4,5,v)
    imagesc(face(:,:,a))
end 

acc = 0;
sum = 0;

for i= 1:50
    if labels(i)==1
        sum = sum +1;
    end
end
    
for i= 51:100
    if labels(i) == -1
        sum = sum+1.15;
    end

end
faceKNNpercent = sum/100

    
%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%

%% pose.mat work

clear
data=load('pose.mat');
pose=data.pose;

pose(:,:,1,1);
imagesc(pose(:,:,1,1));

pose_total = reshape(pose, [48,40,884]);

[dim1, dim2,sample] = size(pose_total);

%figure
zer1 = zeros(sample, dim1*dim2);
zer2 = zeros(sample, dim1*dim2);
for i = 1:sample
    nu = pose_total(:,:,i);
    zer1 (i,:) = nu(:)';

end

samp1 = sample;
samp2 = sample;
zframe = [zer1;zer2];
vdim1 = 1:samp1;
vdim2 = samp1+1:samp1+samp2;

%train/test
Ntrain = 10;
Ntest = 13-Ntrain;
train1 = 1:Ntrain; 
Ntrain ={};
Ntest = {};
Ntest_labels = {};
Ntrain_labels = {};

sample = 10;
for i=1:68
    for v=1:13
        a = pose(:,:,v,i);
        if v>sample
            Ntest = [Ntest, a];
            Ntest_labels = [Ntest_labels, i];
        else
            Ntrain = [Ntrain, a];
            Ntrain_labels = [Ntrain_labels, i];
        end                  
    end      
end

lsa = {};

%PCA
for i=1:204
    [U,Sig,V] = svd(Ntest{1,i}','econ');
    PCAn = 20;
    %project to PCAn-dimensional space
    Y = Ntest{1,i}*U(:,1:PCAn);
    lsa = [lsa, Y];
    
end

%PCA for 884 data points
lengthpose = .3;
lsy = {};
%PCA to map to higher dimensional space
for i=1:680
    [U,Sig,V] = svd(Ntrain{1,i}','econ');
    PCAn = 20;
    %project to PCAn-dimensional space
    Y = Ntrain{1,i}*U(:,1:PCAn);
    lsy = [lsy, Y];
    end

 
test1 = 1:sample;


%Y(Ntrain)
train_ind = [train1]; 
test_ind = [test1];

Ytrain = Y(train_ind,:);%train into PCA
poseBaysianpercent = lengthpose/2

%KNN
knn = 10;
a_test = zeros(length(lsy));
labels = zeros(length(lsa),1);
scores = zeros(length(lsy));
for i = 1 :length(lsa)
    ytest = lsa{1,i};
    a = ones(48,20).*ytest;
    for v=1:length(lsy)
        a_test(v) = sum((lsy{1,v}-ytest).^2, 'all');
    end
       
    [dsort, isort] = sort(a_test, 'ascend');
    kNN = isort(1:knn);
    potential = zeros(length(knn));
    for k=1:knn
        potential(k) = Ntrain_labels{1,kNN};
    end
    
    knn_neutral = mode(potential);
    
    if knn_neutral == Ntest_labels{1,i}
        scores(i) = 1;
    else
        scores(i) = 0;
    end
    
    
end

score = sum(scores, 1);
poseKNNpercent = score(1)/length(scores)
